/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
    };

    behaviors {
        tabesc: tab_escape_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_ESCAPE_GRAVE";
            #binding-cells = <0>;
            bindings = <&gresc>, <&kp TAB>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LSFT)>;
            keep-mods = <(MOD_LALT|MOD_RALT)>;
        };
        shiftlayer: shift_layer {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_LAYER";
            #binding-cells = <0>;
            bindings =
                <&mo 1>,
                <&kp LEFT_SHIFT>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        lmt: long_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LONG_MOD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <1>;// <---[[the W key]]
        }; 
        lmo: long_mod_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "long_mod_layer";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&mo>;

            hold-trigger-key-positions = <1>;// <---[[the W key]]
        };

      };          
        

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
     &tabesc   &kp Q   &kp W          &kp E         &kp R      &kp T                   &kp Y   &kp U      &kp I    &kp O                   &kp P                 &kp BSPC
 &shiftlayer   &kp A   &kp S           &kp D         &kp F      &kp G                   &kp H   &kp J      &kp K    &kp L                &kp SEMI                  &kp SQT
   &kp LCTRL   &kp Z   &kp X           &kp C         &kp V      &kp B                   &kp N   &kp M  &kp COMMA  &kp DOT  &lmt PRINTSCREEN SLASH  &mt RIGHT_CONTROL ENTER
                              &kp LEFT_SHIFT  &lmt LGUI MOD_LALT  &lmt SPACE LCTRL          &lmt SPACE LEFT_SHIFT    &lmo BSPC 2    &lmt ENTER LCTRL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &trans  &kp N1  &kp N2  &kp N3         &kp N4     &kp N5          &kp N6  &kp N7         &kp N8  &kp N9  &kp N0  &trans
 &trans  &trans  &trans  &trans         &trans     &trans          &trans  &trans         &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans         &trans     &trans          &trans  &trans         &trans  &trans  &trans  &trans
                         &trans  &kp RIGHT_ALT  &kp SPACE          &trans  &trans  &kp RIGHT_ALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &trans  &kp N1  &kp N2  &kp N3         &kp N4     &kp N5                  &kp N6          &kp N7            &kp N8             &kp N9         &kp N0      &trans
 &trans  &trans  &trans  &trans         &trans     &trans          &kp LEFT_ARROW  &kp DOWN_ARROW      &kp UP_ARROW    &kp RIGHT_ARROW         &trans  &kp DELETE
 &trans  &trans  &trans  &trans         &trans     &trans               &kp MINUS       &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH      &trans
                         &trans  &kp RIGHT_ALT  &kp SPACE                  &trans          &trans          &kp RALT
            >;
        };

        Then_Layer {
            bindings = <
          &trans        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6  &kp F7  &kp F8   &kp F9  &kp F10  &kp C_VOL_UP
          &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans  &trans  &trans  &kp F11  &kp F12  &kp C_VOL_DN
 &kp PRINTSCREEN        &trans        &trans        &trans        &trans    &bt BT_CLR          &trans  &trans  &trans   &trans   &trans    &kp C_MUTE
                                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        FNs {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans    &kp UP_ARROW           &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans          &trans           &trans  &trans  &trans
                         &trans  &trans  &trans          &trans          &trans          &trans
            >;
        };
    };
};
